{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acer\\\\Desktop\\\\Cours NodeJS\\\\REACT\\\\employe-app\\\\src\\\\context.js\";\nimport React, { Component } from 'react'; //mise en place de mon contexte\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext(); //on mert en place un REDUCEUR\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE_EMPLOYE':\n      return {\n        employes: state.employes.filter\n      };\n  }\n}; //provider est l'armoire qui aura comme value this.state(mabase) et contiendra tous les composants enfants\n//cette classe me permet de fourni ttes les onfo dt j'aurai besoin\n\n\nexport class Provider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      employes: [{\n        id: 1,\n        nom: 'Dupond Dup',\n        poste: 'developpeur',\n        anciennete: '4ans'\n      }, {\n        id: 2,\n        nom: 'Dupond Dup',\n        poste: 'developpeur',\n        anciennete: '4ans'\n      }, {\n        id: 3,\n        nom: 'Dupond Dup',\n        poste: 'developpeur',\n        anciennete: '4ans'\n      }]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n} //consumer me permet d'utiliser ts mes elements \n\nexport const Consumer = Context.Consumer;","map":{"version":3,"sources":["C:/Users/acer/Desktop/Cours NodeJS/REACT/employe-app/src/context.js"],"names":["React","Component","Context","createContext","reducer","state","action","type","employes","filter","Provider","id","nom","poste","anciennete","render","props","children","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,MAAMC,OAAO,gBAAGF,KAAK,CAACG,aAAN,EAAhB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,gBAAL;AACI,aAAM;AACFC,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeC;AADvB,OAAN;AAFR;AAMH,CAPD,C,CASA;AACA;;;AACA,OAAO,MAAMC,QAAN,SAAuBT,SAAvB,CAAgC;AAAA;AAAA;AAAA,SAGnCI,KAHmC,GAG3B;AACJG,MAAAA,QAAQ,EAAG,CACP;AACIG,QAAAA,EAAE,EAAG,CADT;AAEIC,QAAAA,GAAG,EAAG,YAFV;AAGIC,QAAAA,KAAK,EAAG,aAHZ;AAIIC,QAAAA,UAAU,EAAG;AAJjB,OADO,EAOP;AACIH,QAAAA,EAAE,EAAG,CADT;AAEIC,QAAAA,GAAG,EAAG,YAFV;AAGIC,QAAAA,KAAK,EAAG,aAHZ;AAIIC,QAAAA,UAAU,EAAG;AAJjB,OAPO,EAaP;AACIH,QAAAA,EAAE,EAAG,CADT;AAEIC,QAAAA,GAAG,EAAG,YAFV;AAGIC,QAAAA,KAAK,EAAG,aAHZ;AAIIC,QAAAA,UAAU,EAAG;AAJjB,OAbO;AADP,KAH2B;AAAA;;AA0BnCC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE,KAAKV,KAA9B;AAAA,gBACK,KAAKW,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAhCkC,C,CAkCvC;;AACA,OAAO,MAAMC,QAAQ,GAAGhB,OAAO,CAACgB,QAAzB","sourcesContent":["import React, { Component} from 'react';\r\n\r\n//mise en place de mon contexte\r\nconst Context = React.createContext();\r\n\r\n//on mert en place un REDUCEUR\r\nconst reducer = (state, action) =>{\r\n    switch(action.type){\r\n        case 'DELETE_EMPLOYE' :\r\n            return{\r\n                employes: state.employes.filter\r\n            }\r\n    }\r\n} \r\n\r\n//provider est l'armoire qui aura comme value this.state(mabase) et contiendra tous les composants enfants\r\n//cette classe me permet de fourni ttes les onfo dt j'aurai besoin\r\nexport class Provider extends Component{\r\n\r\n    //mon state\r\n    state = {\r\n        employes : [\r\n            {\r\n                id : 1,\r\n                nom : 'Dupond Dup',\r\n                poste : 'developpeur',\r\n                anciennete : '4ans' \r\n            },\r\n            {\r\n                id : 2,\r\n                nom : 'Dupond Dup',\r\n                poste : 'developpeur',\r\n                anciennete : '4ans' \r\n            },\r\n            {\r\n                id : 3,\r\n                nom : 'Dupond Dup',\r\n                poste : 'developpeur',\r\n                anciennete : '4ans' \r\n            }\r\n          \r\n        ],\r\n    }\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state} >\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    } \r\n}\r\n//consumer me permet d'utiliser ts mes elements \r\nexport const Consumer = Context.Consumer;"]},"metadata":{},"sourceType":"module"}